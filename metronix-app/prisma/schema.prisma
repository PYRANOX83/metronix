// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(CITIZEN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  complaints      Complaint[]
  assignedComplaints Complaint[] @relation("SolverAssignment")
  solverProfile   SolverProfile?
  progressLogs    ProgressLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Complaint {
  id          String         @id @default(cuid())
  userId      String
  title       String
  description String         // SQLite doesn't support @db.Text
  category    ComplaintCategory
  priority    Priority       @default(NORMAL)
  status      ComplaintStatus @default(SUBMITTED)
  location    String?
  lat         Float?
  lng         Float?
  mediaUrl    String?
  images      String?        // SQLite doesn't support @db.Text
  citizenId   String
  solverId    String?
  departmentId String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  citizen User @relation(fields: [citizenId], references: [id])
  solver  User?   @relation("SolverAssignment", fields: [solverId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  progressLogs ProgressLog[]
  
  @@map("complaints")
}

model SolverProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  expertise   String?
  availability Boolean  @default(true)
  rating      Float    @default(0)
  totalRatings Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("solver_profiles")
}

model Department {
  id       String @id @default(cuid())
  name     String @unique
  keywords String // SQLite doesn't support @db.Text
  
  solvers  Solver[]
  complaints Complaint[]
  
  @@map("departments")
}

model Solver {
  id          String @id @default(cuid())
  name        String
  departmentId String
  contactInfo String
  
  department Department @relation(fields: [departmentId], references: [id])
  
  @@map("solvers")
}

model ProgressLog {
  id          String @id @default(cuid())
  complaintId String
  status      ComplaintStatus
  note        String?        // SQLite doesn't support @db.Text
  userId      String
  createdAt   DateTime @default(now())
  
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
  
  @@map("progress_logs")
}

enum Role {
  CITIZEN
  SOLVER
  ADMIN
}

enum ComplaintCategory {
  ROADS
  WATER
  ELECTRICITY
  SANITATION
  NOISE
  PARKING
  OTHER
}

enum Priority {
  LOW
  NORMAL
  HIGH
}

enum ComplaintStatus {
  SUBMITTED
  ASSIGNED
  RESOLVED
}
